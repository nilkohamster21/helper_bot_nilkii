import os

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto, InlineKeyboardButton, \
    InlineKeyboardMarkup
from telegram.ext import CommandHandler, Application, MessageHandler, filters, CallbackQueryHandler
from config import BOT_TOKEN
import requests
import json
from docx import Document
import sqlite3

selected_template = ''  # —Å—é–¥–∞ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
PHOTO_DIR = 'photos'

if not os.path.exists(PHOTO_DIR):
    os.makedirs(PHOTO_DIR)
# –¥–∞–ª–µ–µ –≤ –∫–æ–¥–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
TOGETHER_API_KEY = "tgp_v1_WK-V6_Yk_HsXUP4gbSZoOilz9Q-L-RJc1tEmJlvGnGk"  # –º–æ–π api –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ https://together.ai
together_model = "mistralai/Mixtral-8x7B-Instruct-v0.1"

headers = {
    "Authorization": f"Bearer {TOGETHER_API_KEY}",  # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å api –∫–ª—é—á–æ–º
    "Content-Type": "application/json"  # —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json
}


# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏
def split_text_into_blocks(text):
    prompt = (
            "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. "
            "–í–æ—Ç —á—Ç–æ —Ç—ã –î–û–õ–ñ–ï–ù —Å–¥–µ–ª–∞—Ç—å:\n"
            "1. –ü—Ä–æ—á–∏—Ç–∞–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ.\n"
            "2. –†–∞–∑–¥–µ–ª–∏ –µ–≥–æ —Å—Ç—Ä–æ–≥–æ –Ω–∞ 5 –ª–æ–≥–∏—á–µ—Å–∫–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ (–ø–æ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–∂–¥—ã–π).\n"
            "3. –ë–ª–æ–∫–∏ –∏–¥—É—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ –ø–æ—Ä—è–¥–∫—É —Ç–µ–∫—Å—Ç–∞. –ù–µ –º–µ–Ω—è–π –∏—Ö –º–µ—Å—Ç–∞–º–∏, –Ω–µ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–π, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π.\n"
            "4. –ü–µ—Ä–µ–¥ –±–ª–æ–∫–∞–º–∏ –¥–æ–±–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É, –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–î–æ–º–æ–≤–∞—è –º—ã—à—å: –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ').\n"
            "5. –í—Å–µ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + 5 –±–ª–æ–∫–æ–≤) –∑–∞–ø–∏—à–∏ –≤ Python-—Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.\n\n"
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
            "- –¢–û–õ–¨–ö–û –û–î–ò–ù Python-—Å–ø–∏—Å–æ–∫.\n"
            "- –†–æ–≤–Ω–æ 6 —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞: 1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ + 5 –±–ª–æ–∫–æ–≤.\n"
            "- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–ø–∏—Å–∫–æ–≤.\n"
            "- –ù–ï –¥—É–±–ª–∏—Ä—É–π –±–ª–æ–∫–∏, –ù–ï –¥–µ–ª–∞–π –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–∏—Å–∫–∞—Ö. –û–¥–∏–Ω —Ç–µ–∫—Å—Ç ‚Äî –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫.\n\n"
            "–í–æ—Ç —Ç–µ–∫—Å—Ç:\n\n"
            + text
    )

    # –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç

    data = {
        "model": together_model,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å
        "prompt": prompt,  # —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        "max_tokens": 1024,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        "temperature": 0.7,  # —Å—Ç–µ–ø–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        "top_p": 0.9,  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        "stop": None,  # –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    }

    response = requests.post(
        "https://api.together.xyz/v1/completions",  # –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
        headers=headers,  # –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        data=json.dumps(data)  # —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json
    )

    if response.status_code == 200:
        orig_output = response.json()["choices"][0]["text"]  # –µ—Å–ª–∏ –≤—Å—ë –æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
        clean_output = orig_output[
                       orig_output.find('['):orig_output.rfind(']') + 1]  # –æ–±—Ä–µ–∑–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        return clean_output # –í–û–ó–í–†–ê–©–ï–ù–ò–ï –°–ü–ò–°–ö–ê –¢–ï–ö–°–¢–ê
    else:
        print("–û—à–∏–±–∫–∞:", response.status_code, response.text)  # –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
        return None


# —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        username TEXT
    )
''')
conn.commit()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(user):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, first_name, last_name, username)
        VALUES (?, ?, ?, ?)
    ''', (user.id, user.first_name, user.last_name, user.username))
    conn.commit()
    conn.close()


# –°—Ç–∞—Ä—Ç
async def start(update, context):
    keyboard = [
        [InlineKeyboardButton('–Ω–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', callback_data='new_presentation')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    user = update.effective_user
    save_user(user)
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã—Å—Ç—Ä–æ —Å–¥–µ–ª–∞–µ—Ç –≤–∞–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=reply_markup
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def new_presentation_is_pressed(update, context):
    query = update.callback_query
    await query.answer()
    if query.data == 'new_presentation':
        await new_presentation(query.message, context)


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
async def new_presentation(message, context):
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞1
    reply_keyboard1 = [['1', '2', '3', '4'], ['5', '6', '7', '8'], ['9', '10', '–µ—â—ë —à–∞–±–ª–æ–Ω—ã']]
    markup1 = ReplyKeyboardMarkup(reply_keyboard1, one_time_keyboard=True, resize_keyboard=True)

    await message.reply_text(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —è –±—É–¥—É –¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é:", reply_markup=markup1)

    IMAGE_LINKS1 = [  # –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á—Ç–æ–±—ã –Ω–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        'https://easy-exam.ru/static/main_page/image/tasks/880.png',
        'https://easy-exam.ru/static/main_page/image/tasks/881.png',
        'https://easy-exam.ru/static/main_page/image/tasks/882.png',
        'https://easy-exam.ru/static/main_page/image/tasks/883.png',
        'https://easy-exam.ru/static/main_page/image/tasks/884.png',
        'https://easy-exam.ru/static/main_page/image/tasks/885.png',
        'https://easy-exam.ru/static/main_page/image/tasks/886.png',
        'https://easy-exam.ru/static/main_page/image/tasks/887.png',
        'https://easy-exam.ru/static/main_page/image/tasks/888.png',
        'https://easy-exam.ru/static/main_page/image/tasks/889.png'

    ]

    media_group = [InputMediaPhoto(link) for link in IMAGE_LINKS1]
    await message.reply_media_group(media=media_group)  # –í—ã—Å—ã–ª–∞—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —à–∞–±–ª–æ–Ω—ã –ª–¥—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π


# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—Å—ã–ª–∞–µ—Ç –µ—â—ë —à–∞–±–ª–æ–Ω—ã
async def more_templates(update, context):
    template_response = update.message.text
    if template_response == '–µ—â—ë —à–∞–±–ª–æ–Ω—ã':
        # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞2
        reply_keyboard2 = [['11', '12', '13', '14'], ['15', '16', '17', '18'], ['19', '20', '–Ω–∞–∑–∞–¥']]
        markup2 = ReplyKeyboardMarkup(reply_keyboard2, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
            '–ú–æ–∂–µ—Ç —Ç—É—Ç –µ—Å—Ç—å –Ω—É–∂–Ω—ã–π –≤–∞–º —à–∞–±–ª–æ–Ω?ü§î', reply_markup=markup2)

        IMAGE_LINKS2 = [  # –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á—Ç–æ–±—ã –Ω–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω—è
            'https://easy-exam.ru/static/main_page/image/tasks/890.png',
            'https://easy-exam.ru/static/main_page/image/tasks/891.png',
            'https://easy-exam.ru/static/main_page/image/tasks/892.png',
            'https://easy-exam.ru/static/main_page/image/tasks/893.png',
            'https://easy-exam.ru/static/main_page/image/tasks/894.png',
            'https://easy-exam.ru/static/main_page/image/tasks/895.png',
            'https://easy-exam.ru/static/main_page/image/tasks/896.png',
            'https://easy-exam.ru/static/main_page/image/tasks/897.png',
            'https://easy-exam.ru/static/main_page/image/tasks/898.png',
            'https://easy-exam.ru/static/main_page/image/tasks/899.png'

        ]
        media_group = [InputMediaPhoto(link) for link in IMAGE_LINKS2]
        await update.message.reply_media_group(media=media_group)  # –í—ã—Å—ã–ª–∞—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —à–∞–±–ª–æ–Ω—ã –ª–¥—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π

    elif template_response == '–Ω–∞–∑–∞–¥':
        await new_presentation(update, context)

    elif template_response.isdigit() and 1 <= int(template_response) <= 20:
        context.user_data['selected_template'] = template_response  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —à–∞–±–ª–æ–Ω ‚Ññ{template_response}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–∞–π–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt –∏–ª–∏ .docx.")

    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É")


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–ª–æ–∫–∞–º
async def getting_the_text(update, context):
    document = update.message.document
    file = await document.get_file()  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª
    file_name = document.file_name
    file_path = f"presentation_text_{document.file_unique_id}"  # –ø—É—Ç—å —Ñ–∞–π–ª–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º

    try:
        await file.download_to_drive(file_path)  # —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª

        # —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if file_name.endswith('.txt'):
            with open(file_path, "r", encoding="utf-8") as f:
                text = f.read()  # —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

        elif file_name.endswith('.docx'):
            doc = Document(file_path)
            text = "\n".join([para.text.strip() for para in doc.paragraphs if para.text.strip()])

        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–∏—à–ª–∏—Ç–µ .txt –∏–ª–∏ .docx.")
            return

        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")

        blocks = split_text_into_blocks(text)  # —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏
        context.user_data['presentation_text'] = blocks  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

        await update.message.reply_text(
            "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é")

        print(blocks)


    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)


async def getting_the_photo(update, context):
    photo = update.message.photo[-1]  # –±–µ—Ä—ë–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    file = await photo.get_file()  # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    file_path = os.path.join(PHOTO_DIR, f"{file.file_id}.jpg")  # –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await file.download_to_drive(file_path)  # –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    context.user_data.setdefault('photo_paths', []).append(file_path)  # –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!")

def handle_document(update, context):
    document = update.message.document
    file_name = document.file_name.lower()
    file_extension = os.path.splitext(file_name)[-1]

    # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    text_extensions = ['.txt', '.docx']
    image_extensions = ['.jpg', '.jpeg', '.png', '.webp']

    file = document.get_file()
    file_path = os.path.join("downloads", file_name)

    # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs("downloads", exist_ok=True)
    file.download(file_path)

    if file_extension in text_extensions:
        try:
            if file_extension == ".txt":
                with open(file_path, encoding="utf-8") as f:
                    content = f.read()
            elif file_extension == ".docx":
                import docx
                doc = docx.Document(file_path)
                content = "\n".join([para.text for para in doc.paragraphs])

            result = split_text_into_blocks(content)
            if result:
                context.user_data['presentation_text'] = result
                update.message.reply_text("–¢–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
            else:
                update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.")
        except Exception as e:
            update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            print(e)

    elif file_extension in image_extensions:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Ñ–æ—Ç–æ
        photo_path = os.path.join(PHOTO_DIR, file_name)
        os.rename(file_path, photo_path)
        context.user_data.setdefault('photo_paths', []).append(photo_path)
        update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ß—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤—å /make.")
    else:
        os.remove(file_path)
        update.message.reply_text("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–∏—à–ª–∏—Ç–µ .txt, .docx –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
async def help(update, context):
    await update.message.reply_text(
        "—Ç—É—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
reply_keyboard = [['/help']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)


# –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def close_keyboard(update, context):
    await update.message.reply_text(
        "Ok",
        reply_markup=ReplyKeyboardRemove()
    )


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(new_presentation_is_pressed))
    application.add_handler(CommandHandler("new_presentation", new_presentation))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, more_templates))
    application.add_handler(MessageHandler(filters.Document.ALL, getting_the_text))
    application.add_handler(MessageHandler(filters.PHOTO, getting_the_photo))
    application.add_handler(MessageHandler(filters.Document, handle_document))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("close", close_keyboard))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()


if __name__ == "__main__":
    main()
